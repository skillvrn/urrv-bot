name: CI/CD of URRV-BOT

on:
  push:
    branches-ignore:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: '3.13'

jobs:
  lint:
    name: Python lint URRV-BOT
    if: github.ref != 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black mypy
          
      - name: Run flake8 (style guide enforcement)
        run: flake8 . --count --show-source --statistics
        
      - name: Run black (code formatting check)
        run: black --check --diff .
        
      - name: Run mypy (static type checking)
        run: mypy .

  detect-secrets:
    name: Scanning for secrets in code
    if: github.ref != 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gitleaks/gitleaks-action@v2

  test-build-docker:
    name: Testing build docker
    if: github.ref != 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [lint, detect-secrets]
    steps:
      - uses: actions/checkout@v4

      - name: Build rostov-bot image
        working-directory: ./rostov-bot
        run: |
          docker build -t rostov-bot:latest .
      
      - name: Build metar-bot image
        working-directory: ./metar-bot
        run: |
          docker build -t metar-bot:latest .
      
      # - name: Scan Docker image rostov-bot for vulnerabilities
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: rostov-bot:latest
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     severity: 'CRITICAL,HIGH'

      # - name: Scan Docker image metar-bot for vulnerabilities
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: metar-bot:latest
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     severity: 'CRITICAL,HIGH'

  build-push-docker:
    name: Build and push docker
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push rostov-bot image
        working-directory: ./rostov-bot
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/rostov-bot:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/rostov-bot:latest

      - name: Build and push metar-bot image
        working-directory: ./metar-bot
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/metar-bot:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/metar-bot:latest

  deploy:
    name: Deply URRV-BOT on prod
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get version from tag
        id: get_tag
        run: |
          run: echo "TAG_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Pull and tag images
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/rostov-bot:latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/rostov-bot:latest ${{ secrets.DOCKER_USERNAME }}/rostov-bot:$TAG_VERSION
          docker push ${{ secrets.DOCKER_USERNAME }}/rostov-bot:$TAG_VERSION
          docker pull ${{ secrets.DOCKER_USERNAME }}/metar-bot:latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/metar-bot:latest ${{ secrets.DOCKER_USERNAME }}/metar-bot:$TAG_VERSION
          docker push ${{ secrets.DOCKER_USERNAME }}/metar-bot:$TAG_VERSION

      - name: Insert version to docker-compose
        run: |
          sed "s/\${VERSION}/$TAG_VERSION/g" docker-compose.template.yaml > docker-compose.yaml

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Copy docker-compose.yaml to server
        run: |
          scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT }} ./docker-compose.yaml ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/srv/urrv-bot

      - name: SSH to server and deploy
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /srv/urrv-bot
            export DISCORD_TOKEN="${{ secrets.DISCORD_TOKEN }}"
            export DISCORD_ANNOUNCEMENT_CHANNEL_ID="${{ secrets.DISCORD_ANNOUNCEMENT_CHANNEL_ID }}"
            export DISCORD_WELCOME_CHANNEL_ID="${{ secrets.DISCORD_WELCOME_CHANNEL_ID }}"
            export DISCORD_ATO_NEWS_CHANNEL_ID="${{ secrets.DISCORD_ATO_NEWS_CHANNEL_ID }}"
            docker-compose down
            docker-compose up -d
          EOF
